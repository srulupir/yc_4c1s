from uuid import uuid4
import boto3
import os
import json
import requests

PROCESSED_FACES_BUCKET_NAME = os.getenv("PROCESSED_FACES_BUCKET_NAME")
IMAGES_BUCKET_NAME = os.getenv("IMAGES_BUCKET_NAME")
TG_BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TG_BOT_TOKEN}"
YANDEX_STORAGE_ACCESS_KEY = os.getenv("YANDEX_STORAGE_ACCESS_KEY")
YANDEX_STORAGE_SECRET_KEY = os.getenv("YANDEX_STORAGE_SECRET_KEY")
API_GATEWAY = os.getenv("API_GATEWAY")
API_GATEWAY_ORIGINAL = os.getenv("API_GATEWAY_ORIGINAL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è S3
s3_client = boto3.client(
    "s3",
    endpoint_url="https://storage.yandexcloud.net",
    aws_access_key_id=YANDEX_STORAGE_ACCESS_KEY,
    aws_secret_access_key=YANDEX_STORAGE_SECRET_KEY,
)

user_sessions = {}

def get_unnamed_face():
    response = s3_client.list_objects_v2(Bucket=PROCESSED_FACES_BUCKET_NAME)
    if "Contents" not in response:
        return None, None

    for obj in response["Contents"]:
        if obj["Key"].endswith(".json"):
            metadata = s3_client.get_object(Bucket=PROCESSED_FACES_BUCKET_NAME, Key=obj["Key"])
            metadata = json.loads(metadata["Body"].read().decode("utf-8"))
            if metadata.get("name") is None:
                return metadata["face_key"], obj["Key"]

    return None, None

def get_face(chat_id):
    face_key, metadata_key = get_unnamed_face()
    if not face_key:
        send_message(chat_id, "–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–µ–∑ –∏–º–µ–Ω–∏.")
        return

    face_url = f"{API_GATEWAY}/?face={face_key}"
    send_photo(chat_id, face_url)

    user_sessions[chat_id] = {"metadata_key": metadata_key, "face_url": face_url}

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {metadata_key}")  # –õ–æ–≥–∏—Ä—É–µ–º metadata_key
    metadata = s3_client.get_object(Bucket=PROCESSED_FACES_BUCKET_NAME, Key=metadata_key)
    metadata = json.loads(metadata["Body"].read().decode("utf-8"))
    print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º: {metadata}")  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

def find_photo(chat_id, name):
    print(f"–ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /find —Å —Ç–µ–∫—Å—Ç–æ–º - {name}")  # –õ–æ–≥ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

    if not name:
        print("–û—à–∏–±–∫–∞: –∏–º—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ!")  # –õ–æ–≥ –æ—à–∏–±–∫–∏
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    print(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∏–º–µ–Ω–∏: {name}")  # –õ–æ–≥ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
    found_photos = search_original_photos_by_name(name)
    
    if found_photos is None:
        print(f"–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è search_original_photos_by_name –≤–µ—Ä–Ω—É–ª–∞ None –¥–ª—è –∏–º–µ–Ω–∏ {name}")  # –õ–æ–≥ –æ—à–∏–±–∫–∏
        send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
        return

    if not found_photos:
        print(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")  # –õ–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        send_message(chat_id, f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(found_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –∏–º–µ–Ω–∏ {name}")  # –õ–æ–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
    for photo_key in found_photos:
        photo_url = f"{API_GATEWAY_ORIGINAL}/?image={photo_key}"
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ: {photo_url}")  # –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
        send_photo(chat_id, photo_url)

def send_message(chat_id, text):
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        response = requests.post(url, json=payload)
        print(f"–û—Ç–≤–µ—Ç Telegram API: {response.status_code}, {response.text}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def send_photo(chat_id, photo_url):
    url = f"{TELEGRAM_API_URL}/sendPhoto"
    payload = {"chat_id": chat_id, "photo": photo_url}
    try:
        response = requests.post(url, json=payload)
        print(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.status_code}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

def handle_text_input(chat_id, text):
    if chat_id not in user_sessions or "metadata_key" not in user_sessions[chat_id]:
        send_message(chat_id, "–û—à–∏–±–∫–∞.")
        return

    metadata_key = user_sessions[chat_id]["metadata_key"]
    update_face_name(metadata_key, text)

    send_message(chat_id, f"–ò–º—è '{text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
    del user_sessions[chat_id]

def sending_photo_error(message, chat_id):
    send_message(chat_id, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

def update_face_name(metadata_key, name):
    response = s3_client.get_object(Bucket=PROCESSED_FACES_BUCKET_NAME, Key=metadata_key)
    metadata = json.loads(response["Body"].read().decode("utf-8"))
    print(f"–ü–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: {metadata}")  # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    metadata["name"] = name
    store_metadata(metadata["face_key"], metadata)
    print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {metadata}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

def store_metadata(face_key, metadata):
    if "name" not in metadata or not metadata["name"]:
        print(f"–û—à–∏–±–∫–∞! –ò–º—è –ø—É—Å—Ç–æ–µ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∫–ª—é—á–æ–º {face_key}")
    else:
        metadata_key = face_key.replace(".jpg", ".json")
        metadata_body = json.dumps(metadata, indent=2)
        s3_client.put_object(
            Bucket=PROCESSED_FACES_BUCKET_NAME,
            Key=metadata_key,
            Body=metadata_body,
            ContentType="application/json"
        )
        print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∫–ª—é—á–æ–º {face_key}")

def search_original_photos_by_name(name):
    print(f"–ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏–º–µ–Ω–µ–º: {name}")  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    response = s3_client.list_objects_v2(Bucket=PROCESSED_FACES_BUCKET_NAME)
    original_photos = []

    for obj in response.get("Contents", []):
        if obj["Key"].endswith(".json"):
            metadata = s3_client.get_object(Bucket=PROCESSED_FACES_BUCKET_NAME, Key=obj["Key"])
            metadata = json.loads(metadata["Body"].read().decode("utf-8"))
            if metadata.get("name") == name:
                response_ph = s3_client.list_objects_v2(Bucket=IMAGES_BUCKET_NAME)
                for obj_ph in response_ph.get("Contents", []):
                    if obj_ph["Key"].endswith(".jpg") and metadata["original_photo_key"] == obj_ph["Key"]:
                        original_photos.append(metadata["original_photo_key"])

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(original_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
    print(f"üì∏ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ (–∫–ª—é—á–∏): {original_photos}")
    return original_photos

def handler(event, context):
    try:
        data = json.loads(event.get('body'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        return {"statusCode": 400, "body": f"Invalid JSON: {e}"}
    
    if "message" not in data:
        return {"statusCode": 200, "body": "No message in update"}

    message = data["message"]
    chat_id = message["chat"]["id"]

    if "text" in message:
        text = message["text"]

        if text == "/start":
            send_message(chat_id, "–ö–æ–º–∞–Ω–¥—ã:\n/getface - –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ª–∏—Ü–∞\n/find {name} - –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –ø–æ –∏–º–µ–Ω–∏")
        elif text == "/getface":
            get_face(chat_id)
        elif text.startswith("/find"):
            find_photo(chat_id, text[6:].strip())
        else:
            handle_text_input(chat_id, text)

    elif "photo" in message:
        sending_photo_error(message, chat_id)

    return {"statusCode": 200, "body": "OK"}